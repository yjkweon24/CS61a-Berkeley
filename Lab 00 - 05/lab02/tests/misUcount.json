{"countData": {"lambdacallexprnotcall": 2, "lambdacallexprnotcall-lambdacallexpr": 2, "rtnvalnotdisp": 1, "rtnvalnotdisp-pyinterpreterdisplaynothing": 1, "lambdamisidentifyrtnval": 2, "lambdamisidentifyrtnval-lambdacallexpr": 2, "lambdamisidentifyrtnval-sloppy": 2, "fndispnothing": 1, "fndispnothing-functiondisplay": 1, "prntstrwithquotes": 1, "prntstrwithquotes-printstring": 1, "composedfnisonefn": 1, "composedfnisonefn-evalcomposedfn": 1, "composedfnisonefn-evalfncall": 1, "prntrtnsprntedval": 1, "prntrtnsprntedval-printreturnvalue": 1}, "answerDict": {">>> lambda x: x\nFunction\n>>> a = lambda x: x\n>>> a(5)\nLOCKED_ANSWER\n>>> b = lambda: 3\n>>> b()\nLOCKED_ANSWER\n>>> c = lambda x: lambda: print('123')\n>>> c(88)\nLOCKED_ANSWER\n>>> c(88)()\nLOCKED_ANSWER\n>>> d = lambda f: f(4)\n>>> def square(x):\n...     return x * x\n>>> d(square)\nLOCKED_ANSWER\n": ["['function']", "['errors']", "['Nothing']", "['Function']", "['Error']"], ">>> lambda x: x\nFunction\n>>> a = lambda x: x\n>>> a(5)\n5\n>>> b = lambda: 3\n>>> b()\n3\n>>> c = lambda x: lambda: print('123')\n>>> c(88)\nLOCKED_ANSWER\n>>> c(88)()\nLOCKED_ANSWER\n>>> d = lambda f: f(4)\n>>> def square(x):\n...     return x * x\n>>> d(square)\nLOCKED_ANSWER\n": ["['123']", "['88']", "['None']", "['Nothing']", "['Error']"], ">>> lambda x: x\nFunction\n>>> a = lambda x: x\n>>> a(5)\n5\n>>> b = lambda: 3\n>>> b()\n3\n>>> c = lambda x: lambda: print('123')\n>>> c(88)\nFunction\n>>> c(88)()\nLOCKED_ANSWER\n>>> d = lambda f: f(4)\n>>> def square(x):\n...     return x * x\n>>> d(square)\nLOCKED_ANSWER\n": ["[\"'123'\"]"], ">>> t = lambda f: lambda x: f(f(f(x)))\n>>> s = lambda x: x + 1\n>>> t(s)(0)\nLOCKED_ANSWER\n>>> bar = lambda y: lambda x: pow(x, y)\n>>> bar()(15)\nLOCKED_ANSWER\n>>> foo = lambda: 32\n>>> foobar = lambda x, y: x // y\n>>> a = lambda x: foobar(foo(), bar(4)(x))\n>>> a(2)\nLOCKED_ANSWER\n>>> b = lambda x, y: print('summer')\nLOCKED_ANSWER\n>>> c = b(4, 'dog')\nLOCKED_ANSWER\n>>> print(c)\nLOCKED_ANSWER\n": ["['1']"], ">>> t = lambda f: lambda x: f(f(f(x)))\n>>> s = lambda x: x + 1\n>>> t(s)(0)\n3\n>>> bar = lambda y: lambda x: pow(x, y)\n>>> bar()(15)\nError\n>>> foo = lambda: 32\n>>> foobar = lambda x, y: x // y\n>>> a = lambda x: foobar(foo(), bar(4)(x))\n>>> a(2)\n2\n>>> b = lambda x, y: print('summer')\nLOCKED_ANSWER\n>>> c = b(4, 'dog')\nLOCKED_ANSWER\n>>> print(c)\nLOCKED_ANSWER\n": ["['b(x,y)']"], ">>> t = lambda f: lambda x: f(f(f(x)))\n>>> s = lambda x: x + 1\n>>> t(s)(0)\n3\n>>> bar = lambda y: lambda x: pow(x, y)\n>>> bar()(15)\nError\n>>> foo = lambda: 32\n>>> foobar = lambda x, y: x // y\n>>> a = lambda x: foobar(foo(), bar(4)(x))\n>>> a(2)\n2\n>>> b = lambda x, y: print('summer')\nNothing\n>>> c = b(4, 'dog')\nsummer\n>>> print(c)\nLOCKED_ANSWER\n": ["['summer']"], ">>> def even(f):\n...     def odd(x):\n...         if x < 0:\n...             return f(-x)\n...         return f(x)\n...     return odd\n>>> stevphen = lambda x: x\n>>> stewart = even(stevphen)\n>>> stewart\nLOCKED_ANSWER\n>>> stewart(61)\nLOCKED_ANSWER\n>>> stewart(-4)\nLOCKED_ANSWER\n": ["['/Users/yjkweon24/Desktop/Cal/2017\\\\ Spring/Comsc/cs61a/lab/lab02']"]}}